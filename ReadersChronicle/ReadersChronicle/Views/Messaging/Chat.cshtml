@using System.Security.Claims
@model ReadersChronicle.Models.ChatViewModel

    <div class="row mt-4">
        <a class="dropdown-item" asp-controller="Friendship" asp-action="Friends">Back</a>
    </div>
    <div class="chat-window">
        <h3>Chat with @Model.ReceiverUserName</h3>

        <div class="messages" id="messages">
            @foreach (var message in Model.Messages)
            {
                <div class="message @(message.SenderUserId == Model.CurrentUserId ? "sent" : "received")">
                    <strong>@message.SenderUserName:</strong>
                    <p>@message.Text</p>
                    <span class="timestamp">@message.SentAt.ToLocalTime().ToString("g")</span>
                </div>
            }
        </div>

        <div class="message-input">
            <textarea id="messageText" placeholder="Type your message..."></textarea>
            <button id="sendButton">Send</button>
        </div>
    </div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script scoped>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/messageHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.on("ReceiveMessage", (senderUserId, senderUserName, messageText, sentAt) => {
        const messageDiv = document.createElement("div");
        messageDiv.className = senderUserId === "@Model.CurrentUserId" ? "message sent" : "message received";
        messageDiv.innerHTML = `
                    <strong>${senderUserName}:</strong>
                    <p>${messageText}</p>
                    <span class="timestamp">${new Date(sentAt).toLocaleString()}</span>
                `;
        document.getElementById("messages").appendChild(messageDiv);
    });

    document.getElementById("sendButton").addEventListener("click", async () => {
        const messageText = document.getElementById("messageText").value;
        const receiverUserId = "@Model.ReceiverUserId";
        if (messageText.trim() === "") return;

        try {
            await connection.invoke("SendMessage", receiverUserId, messageText);
            console.log("Message sent: ", messageText);
            document.getElementById("messageText").value = "";
        } catch (err) {
            console.error("Error sending message: ", err.toString());
        }
    });

    function scrollToBottom() {
        const messageContainer = document.getElementById("messages");
        messageContainer.scrollTop = messageContainer.scrollHeight;
    }

    window.onload = scrollToBottom;

    connection.start().catch(err => console.error(err.toString()));

</script>

<style scoped>
    .chat-window {
        border: 1px solid #ddd;
        border-radius: 10px;
        padding: 10px;
        max-width: 600px;
        margin: auto;
    }

    .messages {
        height: 400px;
        overflow-y: scroll;
        padding: 10px;
        background: #f9f9f9;
        margin-bottom: 10px;
    }

    .message {
        margin: 5px 0;
        padding: 10px;
        border-radius: 10px;
        max-width: 75%;
    }

        .message.sent {
            background-color: #d1e7dd;
            text-align: right;
            margin-left: auto;
        }

        .message.received {
            background-color: #f8d7da;
            text-align: left;
            margin-right: auto;
        }

    .timestamp {
        display: block;
        font-size: 0.8em;
        color: #666;
        margin-top: 5px;
    }


    #message-input {
        display: flex;
    }

    #messageText {
        flex: 1;
        padding: 5px;
    }

    #sendButton {
        padding: 5px 10px;
    }

</style>