@using System.Security.Claims
@model ReadersChronicle.Models.ChatViewModel

<div class="container" id="messaging-container">
    <div class="chat-window">
        <div class="row mt-4 d-flex mb-3">
            <div class="col-3">
                <a class="w-25 ps-3 fw-bold fs-5" id="back-button" asp-controller="Friendship" asp-action="Friends">Back</a>
            </div>
            <div class="col-9"><h4 id="message-receiver" class="pe-3">Chat with @Model.ReceiverUserName</h4></div>
        </div>
        <div class="messages" id="messages">
            @foreach (var message in Model.Messages)
            {
                <div class="message my-3 @(message.SenderUserId == Model.CurrentUserId ? "sent" : "received")">
                    <strong>@message.SenderUserName:</strong>
                    <p>@message.Text</p>
                    <span class="timestamp">@message.SentAt.ToLocalTime().ToString("g")</span>
                </div>
            }
        </div>

        <div class="message-input d-flex align-items-center mt-3">
            <textarea id="messageText" class="form-control me-2" placeholder="Type your message..." rows="1"></textarea>
            <button id="sendButton" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script scoped>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/messageHub")
        .configureLogging(signalR.LogLevel.Information)
        .build();

    connection.on("ReceiveMessage", (senderUserId, senderUserName, messageText, sentAt) => {
        const messageDiv = document.createElement("div");
        messageDiv.className = senderUserId === "@Model.CurrentUserId" ? "message sent" : "message received";
        messageDiv.innerHTML = `
                    <strong>${senderUserName}:</strong>
                    <p>${messageText}</p>
                    <span class="timestamp">${new Date(sentAt).toLocaleString()}</span>
                `;
        document.getElementById("messages").appendChild(messageDiv);
    });

    document.getElementById("sendButton").addEventListener("click", async () => {
        const messageText = document.getElementById("messageText").value;
        const receiverUserId = "@Model.ReceiverUserId";
        if (messageText.trim() === "") return;

        try {
            await connection.invoke("SendMessage", receiverUserId, messageText);
            console.log("Message sent: ", messageText);
            document.getElementById("messageText").value = "";
        } catch (err) {
            console.error("Error sending message: ", err.toString());
        }
    });

    function scrollToBottom() {
        const messageContainer = document.getElementById("messages");
        messageContainer.scrollTop = messageContainer.scrollHeight;
    }

    window.onload = scrollToBottom;

    connection.start().catch(err => console.error(err.toString()));

</script>

<style scoped>
    #back-button{
        color:black;
        text-decoration:none;
    }

    #message-receiver{
        float:right;
        margin-bottom: 0px !important;
    }

    #messaging-container {
        margin-top: 50px;
        height:93%;
        padding-top: 2%;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        padding: 20px;
    }

    .chat-window {
        display: flex;
        flex-direction: column; /* Stack elements vertically */
        justify-content: space-between; /* Push the input to the bottom */
        border: 1px solid #ddd;
        border-radius: 10px;
        background-color: white;
        padding: 10px;
        max-width: 600px;
        margin: auto;
        height: 95%;
    }

    .messages {
        flex: 1; /* Take available vertical space */
        overflow-y: scroll;
        padding: 10px;
        background: #f9f9f9;
        margin-bottom: 10px;
    }

    .message {
        margin: 5px 0;
        padding: 10px;
        border-radius: 10px;
        max-width: 75%;
    }

        .message.sent {
            background-color: #d1e7dd;
            text-align: right;
            margin-left: auto;
        }

        .message.received {
            background-color: #f8d7da;
            text-align: left;
            margin-right: auto;
        }

    .timestamp {
        display: block;
        font-size: 0.8em;
        color: #666;
        margin-top: 5px;
    }


    .message-input {
        border-top: 1px solid #ddd;
        padding: 10px;
        background-color: #ffffff;
        border-radius: 0 0 10px 10px;
    }

    #messageText {
        flex: 1;
        border-radius: 20px;
        padding: 10px 15px;
        border: 1px solid #ddd;
        font-size: 1rem;
        resize: none; /* Prevent resizing */
    }

        #messageText:focus {
            outline: none;
            border-color: #6d486b;
            box-shadow: 0 0 5px rgba(109, 72, 107, 0.5);
        }

    #sendButton {
        background-color: #6d486b;
        color: #fff;
        border: none;
        border-radius: 20px;
        padding: 10px 20px;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }

        #sendButton:hover {
            background-color: #8d6b88;
        }

    .message-input {
        box-shadow: 0px -2px 5px rgba(0, 0, 0, 0.1);
    }

</style>